{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\ihand\\\\GitHub\\\\fyp18053\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\ihand\\\\GitHub\\\\fyp18053\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\ihand\\\\GitHub\\\\fyp18053\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\ihand\\\\GitHub\\\\fyp18053\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\ihand\\\\GitHub\\\\fyp18053\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\ihand\\\\GitHub\\\\fyp18053\\\\src\\\\components\\\\core\\\\CodeView\\\\CodeView.js\";\nimport React from 'react';\nimport Ace from 'react-ace';\nvar themes = ['terminal', 'tomorrow'];\nthemes.forEach(function (theme) {\n  require(\"brace/theme/\".concat(theme));\n});\n\nvar CodeView =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CodeView, _React$Component);\n\n  function CodeView(props) {\n    var _this;\n\n    _classCallCheck(this, CodeView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CodeView).call(this, props));\n    _this.state = {\n      value: \"Test\",\n      theme: 'terminal',\n      mode: 'java',\n      enableBasicAutocompletion: false,\n      enableLiveAutocompletion: false,\n      fontSize: 14,\n      showGutter: true,\n      showPrintMargin: true,\n      highlightActiveLine: true,\n      enableSnippets: false,\n      showLineNumbers: true\n    };\n    return _this;\n  }\n\n  _createClass(CodeView, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(Ace, {\n        theme: this.state.theme,\n        mode: this.state.mode,\n        value: this.state.value,\n        editorProps: {\n          $blockScrolling: true\n        },\n        onChange: onChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }), React.createElement(Button, {\n        color: \"secondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \" Run Code \"), React.createElement(Button, {\n        color: \"secondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \" Reset \"));\n    }\n  }]);\n\n  return CodeView;\n}(React.Component);\n\nexport default CodeView;","map":{"version":3,"sources":["C:\\Users\\ihand\\GitHub\\fyp18053\\src\\components\\core\\CodeView\\CodeView.js"],"names":["React","Ace","themes","forEach","theme","require","CodeView","props","state","value","mode","enableBasicAutocompletion","enableLiveAutocompletion","fontSize","showGutter","showPrintMargin","highlightActiveLine","enableSnippets","showLineNumbers","$blockScrolling","onChange","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,WAAhB;AAEA,IAAMC,MAAM,GAAG,CACX,UADW,EAEX,UAFW,CAAf;AAKAA,MAAM,CAACC,OAAP,CAAe,UAAAC,KAAK,EAAG;AACnBC,EAAAA,OAAO,uBAAgBD,KAAhB,EAAP;AACH,CAFD;;IAIME,Q;;;;;AACF,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,kFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,QADI;AAETL,MAAAA,KAAK,EAAE,UAFE;AAGTM,MAAAA,IAAI,EAAE,MAHG;AAITC,MAAAA,yBAAyB,EAAE,KAJlB;AAKTC,MAAAA,wBAAwB,EAAE,KALjB;AAMTC,MAAAA,QAAQ,EAAE,EAND;AAOTC,MAAAA,UAAU,EAAE,IAPH;AAQTC,MAAAA,eAAe,EAAE,IARR;AASTC,MAAAA,mBAAmB,EAAE,IATZ;AAUTC,MAAAA,cAAc,EAAE,KAVP;AAWTC,MAAAA,eAAe,EAAE;AAXR,KAAb;AAFe;AAelB;;;;6BACO;AACJ,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,GAAD;AACI,QAAA,KAAK,EAAE,KAAKV,KAAL,CAAWJ,KADtB;AAEI,QAAA,IAAI,EAAG,KAAKI,KAAL,CAAWE,IAFtB;AAGI,QAAA,KAAK,EAAE,KAAKF,KAAL,CAAWC,KAHtB;AAKI,QAAA,WAAW,EACP;AACIU,UAAAA,eAAe,EAAE;AADrB,SANR;AAUI,QAAA,QAAQ,EAAEC,QAVd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAcI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAG,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAdJ,EAeI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAG,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAfJ,CADJ;AAoBH;;;;EAtCkBpB,KAAK,CAACqB,S;;AA6C7B,eAAef,QAAf","sourcesContent":["import React from 'react';\r\nimport Ace from 'react-ace';\r\n\r\nconst themes = [\r\n    'terminal',\r\n    'tomorrow'\r\n]\r\n\r\nthemes.forEach(theme =>{\r\n    require(`brace/theme/${theme}`);\r\n});\r\n\r\nclass CodeView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: `Test`,\r\n            theme: 'terminal',\r\n            mode: 'java',\r\n            enableBasicAutocompletion: false,\r\n            enableLiveAutocompletion: false,\r\n            fontSize: 14,\r\n            showGutter: true,\r\n            showPrintMargin: true,\r\n            highlightActiveLine: true,\r\n            enableSnippets: false,\r\n            showLineNumbers: true,\r\n    }\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Ace\r\n                    theme={this.state.theme}\r\n                    mode= {this.state.mode}\r\n                    value={this.state.value}\r\n\r\n                    editorProps = {\r\n                        {\r\n                            $blockScrolling: true\r\n                        }\r\n                    }\r\n                    onChange={onChange}\r\n                />\r\n                \r\n                <Button color = \"secondary\"> Run Code </Button>\r\n                <Button color = \"secondary\"> Reset </Button>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default CodeView;"]},"metadata":{},"sourceType":"module"}